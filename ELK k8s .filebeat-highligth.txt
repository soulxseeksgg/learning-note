
____________         ___________        ________________          _________
| filebeat |  --->> | logstash |  --->> | elasticsearch | --->>  | kibana |
                        
------------------ yaml ของ filebeat และคำอธิบาย----------------------
  1.#set สิทธิ์การอ่าน pod
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: filebeat-cluster-role 
    rules:
      - apiGroups: [""]  
        resources: ["pods", "namespaces", "nodes"]    <------ การให้เข้าถึง resource ระดับใหน
        verbs: ["list", "get","watch"]          <------ ให้ทำอะไรได้บ้าง


  2.#มาคู่กับตัวผูกกฏกับ account 
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: filebeat-cluster-role-binding  
    subjects:
      - kind: ServiceAccount
        name: default     <<---- ให้ account default ซึ่งเวลาสร้างถ้าไม่กำหนด container มันจะได้ user นี้อยู่แล้ว
        namespace: elk
    roleRef:
      kind: ClusterRole
      name: filebeat-cluster-role 
      apiGroup: rbac.authorization.k8s.io

  3. # การสร้าง pv ไว้เก็บ registry ให้มันอ่าน ไม่หายเวลาลบ pod สร้าง storage แบ่งจาก hd ออกมาไว้ก่อน 1 Gi
    apiVersion: v1
    kind: PersistentVolume
    metadata:
      name: filebeat-pv  <---- ชื่อ pv
    spec:
      capacity:
        storage: 1Gi      <----- แบ่งมาไว้ 1 Gb
      volumeMode: Filesystem
      accessModes:
        - ReadWriteOnce
      persistentVolumeReclaimPolicy: Retain
      storageClassName: hostpath   <---- อ้างอิงไปที่ hostpath storage ของ k8s มีคำสั่ง get ดู
      hostPath:
        path: /usr/share/filebeat/data/registry   <---- path เอาเหมือนกับ path จริงเลย จะได้ไม่งง

  ---
  4. # มาคู่กับตัวขอเคลม
    apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: filebeat-pvc
      namespace: elk 
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi   <---- ขอ 1 Gb
      storageClassName: hostpath   <---- ขอเคลมไปที่ storage ก้อนนี้เดียวมันไปหา pv เอาเอง

  ----
  5. # deployment yaml
    apiVersion: apps/v1  <<--- รายละเอียดตามข้างบน
      kind: DaemonSet <<--- 1 node มี 1 pod
      metadata:
        name: filebeat
        namespace: elk
        labels:
          app: filebeat
      spec:
        selector:
          matchLabels:
            app: filebeat
        template:
          metadata:
            labels:
              app: filebeat <<---- เอาไว้เรียกตอนคำสั่ง อ้าง -l
          spec:
            securityContext:
              fsGroup: 0   <---- สิทธิ์ในการอ่าน volume
              runAsUser: 0   <---- container นี้รันด้วย 1000 คือทั่วไป
            containers:
              - name: filebeat
                image: docker.elastic.co/beats/filebeat:7.2.0   <---อ้างอิง image
                resources:
                  limits:
                    cpu: 100m
                    memory: 128Mi

                env:
                  - name: NODE_NAME   <---- ให้ container ดึงชื่อให้เก็บไว้ในตัวแปร NODE_NAME จะเอาไปใช้ข้างล่างได้ จะได้เชื่อ node มา
                    valueFrom:
                      fieldRef:
                        fieldPath: spec.nodeName
                  - name: TZ
                    value: "Asia/Bangkok"  <--- กำหนด timezone แม่งทำงานได้รึป่าวก็ไม่รู้
              

                volumeMounts:
                  - name: filebeat-config
                    mountPath: /usr/share/filebeat/filebeat.yml  <<---- อ้างอิงไปข้างล่าง file confimap
                    subPath: filebeat.yml

                  - name: varlog-containers
                    mountPath: /var/log/containers   <<----- เอาไว้อ่าน log ที่ container เก็บของแต่ละ app มา

                  - name: varlog-pods
                    mountPath: /var/log/pods    <<----- เอาไว้อ่าน log ที่ pod เก็บของแต่ละ app มา จริงๆมันต่างจากข้างบน

                  - name: docker-containers
                    mountPath: /var/lib/docker/containers   <<----- อันนี้ก็ต่างไปอี๊กก สรุปแม่งอ่านตัวใหน น่าจะตัวแรก แต่เหมือนลบออกแล้ว discover ไม่ทำงาน

                  - name: filebeat-registry
                    mountPath: /usr/share/filebeat/data/registry  <<--- path เก็บ registry เอาไว้บันลึกไฟล์ว่าอ่านถึงใหนแล้ว  path จริง /usr/share/filebeat/data/registry/filebeat/data.json
                  
            volumes:
              - name: filebeat-config
                configMap:
                  name: filebeat
                  
              - name: varlog-containers
                hostPath:
                  path: /var/log/containers
                  type: Directory  

              - name: varlog-pods
                hostPath:
                  path: /var/log/pods
                  type: Directory

              - name: docker-containers
                hostPath:
                  path: /var/lib/docker/containers
                  type: Directory   

              - name: filebeat-registry
                persistentVolumeClaim:
                  claimName: filebeat-pvc   <---- ใช้ pvc ที่สร้างไว้ในการเก็บ

  6. # file config map
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: filebeat
      namespace: elk
    data:
      filebeat.yml: |    <<---- file confimap ที่ 1
        logging:
          level: debug
          selectors: [registrar]  <--- เปิดอ่าน log แบบสบายตา

        filebeat.registry.flush: 10s  <---- ให้อ่าน registry เข้าไปดูทุก 10วิ ถ้ามีการเปลี่ยนแปลงให้ triger อ่าน log

        filebeat.autodiscover:  <---- อ่าน log แบบหาเองตาม container
          providers:
            - type: kubernetes
              host: ${NODE_NAME}
              templates:
                - condition:
                    contains:
                      kubernetes.labels.app: "myapp"
                  config:
                    - type: container
                      paths:
                        - /var/log/containers/*${data.kubernetes.container.id}.log  
                      processors:
                        - add_fields:  <---- เพิ่ม field ใหม่ได้
                            target: "appname"
                            fields:
                              app: "myapp"
                        - drop_fields:   <---- ดรอป fields ทิ้งก่อนส่งไป logstash
                            fields: ["ecs","stream","agent","log.offset","@version"]
                        - drop_event:    
                            when:   <<--- ดรอปทิ้งทั้งก้อน ถ้าเจอไอ้ที่ไม่ใช่ log เช่นมันปริ้นคำว่า spring boot ใน log
                              or:  
                                - regexp:
                                    message: "^\\W"    
                                - regexp:
                                    message: "^\\s*$"
                - condition:
                    contains:
                      kubernetes.labels.app_kubernetes_io/instance: "my-redis"  <<---- แอพที่สอง
                  config:
                    - type: container
                      paths:
                        - /var/log/containers/*${data.kubernetes.container.id}.log   <--- เข้าไปอ่านตาม path ของ app      
                      processors:
                        - add_fields:
                            target: "appname"
                            fields:
                              app: "redis"
                        - drop_fields:
                            fields: ["ecs","log.offset","host","input","kubernetes.labels","kubernetes.uid","kubernetes.statefulset","agent"]
                        - drop_event:
                            when:
                              or:
                                - regexp:
                                    message: "^\\W"
                                - regexp:
                                    message: "^\\s*$"

        output.logstash:  <<----- ใช้หลาย input ได้แต่ออก output เดียว 
          hosts: ["logstash:5044"]  

------------------ yaml ของ filebeat และคำอธิบาย----------------------

ืnote
  filebeat.autodiscover vs filebeat.inputs 
  filebeat.autodiscover (หาชื่อเอง ระบุชื่อแอพได้ด้วย แต่ต้องสร้าง ClusterRole, ClusterRoleBinding) 
  filebeat.inputs (ง่าย สั้น งานหยาบหน่อย) 

 
# call แบบ stdin
  #เข้า container ผ่าน command 
    kubectl exec -it filebeat-589bb7446-67xbn -n elk -- /bin/sh
  #call
    echo '{"log": "gg"}' | filebeat -e  //ไม่ไส่ -e ไม่ print

----คำสั่ง-----
k apply -f filebeat.yaml   //ไม่ต้องลบ
krds filebeat -n elk   //restart เอาเลย
kl app=filebeat -nelk